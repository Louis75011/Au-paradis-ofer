### Scripts de confort (dev)

<!-- Stripe paiement carte et SEPA, FullCalendar : calendrier g√©r√© et r√©servations, Cloudflare test et deploiement avant h√©bergeur -->

<!-- Google Agenda (pour √©viter les doubles r√©servations) : Settings ‚Üí Calendars ‚Üí connectez votre compte au.paradis.o.fer@gmail.com. -->

<!-- pnpm -C apps/frontend build; if ($LASTEXITCODE -eq 0) { pnpm -C apps/frontend start }
(TEST PROD LOCAL) -->

<!-- pnpm --filter frontend vercel build
pnpm -C apps/frontend build; if ($LASTEXITCODE -eq 0) { pnpm -C apps/frontend start } -->

<!-- Reservation autonome avec FullCalendar et un paiement Stripe.
SEPA est autoris√© uniquement si le cr√©neau ‚â• J+5.
Phase 1 marche sans base. Phase 2 (KV) verrouille les cr√©neaux proprement. -->

#### Frontend (Next.js)

```powershell
pnpm dev       # Next dev
pnpm build     # Next build
pnpm lint      # ESLint + Stylelint
pnpm test      # Vitest
pnpm storybook # Storybook
```

#### Backend (FastAPI)

```powershell
.\.venv\Scripts\Activate.ps1
uvicorn app.main:app --reload   # (structure √† venir)
pytest
ruff check .
black . --check
alembic upgrade head

```

#### Commandes Terminal

# GIT
git aa ; git c "NOM" ; git p

# M√ÄJ
git checkout main ; git pull origin main ; git merge dev ; git push origin main

# STORYBOOK
pnpm -C apps/frontend storybook

# LOCAL FRONT
pnpm -C apps/frontend dev

# LOCAL BACK
cd \apps\api
.venv\Scripts\Activate
uvicorn app.main:app --reload --port 8000

#### √Ä tester

Exemple de requ√™tes GraphQL (tests rapides)
R√©cup√©rer les s√©ances
query { sessions { id name duration_minutes price_eur } }

Demander une r√©servation (enverra un mail simul√© si SMTP non configur√©)
mutation {
  requestBooking(input:{
    fullName:"Jean Dupont", email:"jean@example.com", date:"2025-09-02", sessionId:1
  }) { id status }
}

IMAGES : Cloudinary (!) ou Vercel Blob pour le stockage d‚Äôimages

#### Git utilisateur

[core]
    editor = code --wait   # VSCode comme √©diteur par d√©faut (facultatif)
    autocrlf = input       # gestion des fins de ligne (bon compromis sous Windows)
    ignorecase = true

[alias]
    st = status
    co = checkout
    b = branch
    br = branch
    g = grep
    c = commit -m
    aa = add .
    ca = commit -a -m
    df = diff
    lg = log --oneline --graph --decorate --all
    pl = pull --rebase
    ps = push
    p = push
    undo = reset --soft HEAD~1
    amend = commit --amend --no-edit
    acp = "!f() { git add . && git commit -m \"$1\" && git push; }; f"
    sw = switch
    cob = checkout -b

üëâ Ces commandes sont vos raccourcis pratiques pour lancer le frontend, le backend, l'outil de versioning git, les tests et les outils de qualit√©.