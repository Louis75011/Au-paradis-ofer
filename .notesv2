### Scripts de confort (dev)

### A voir

<!-- Msg amis APO visitez parlez du gens du nord ou de passage.
RGPD/Cookies, paiements Stripe GITE (d√©sactiver chevaux) calendriers pour G√Æte et CHEVAUX. -->

<!-- vrai param√®tre paiement carte + SEPA. Agenda G√Æte √† part et complet
https://search.google.com/search-console/welcome?utm_source=wmx&utm_medium=deprecation-pane&utm_content=home#utm_source=fr-wmxmsg&utm_medium=wmxmsg&utm_campaign=bm&authuser=0 -->

<!-- ssh ovh-vps
ssh root@51.68.230.93
-->
<!-- git add . ; git commit -m "package preprod et prod" ; git p
cd /mnt/e/Projets/Au-paradis-ofer
git push origin preprod

cat /var/www/au-paradis-ofer-preprod/.commit
ss -ltnp | grep 3001
 -->

<!-- ssh -i ~/.ssh/id_rsa root@51.68.230.93 -->

<!-- Google Agenda (ICS)
Quand vous ajoutez un √©v√©nement dans Google Agenda (‚ÄúG√Æte du 22 au 23‚Äù), √ßa appara√Æt dans l‚ÄôICS ‚Üí et donc dans /api/availability/seance.
Mais actuellement, vous ne traitez l‚ÄôICS que pour les s√©ances.
Les g√Ætes ne sont pas lus depuis ICS ‚Üí logique, puisque vous voulez que √ßa passe par le paiement.
üëâ Donc ICS = planning des s√©ances, qui peut √™tre rempli √† la main dans Google Calendar. -->

; ; # sant√© g√©n√©rale
; pm2 ls
; pm2 logs --lines 50
; # v√©rifiez les ports
; ss -ltnp | grep -E ':3000|:3001' || true

<!-- 7) Stripe & tests
Dans Stripe (test) :
Active Cards + SEPA (Settings ‚Üí Payment methods).
Cr√©e deux Products : G√Æte sans s√©ance (95‚Ç¨) et G√Æte + s√©ance (130‚Ç¨).
R√©cup√®re les Price IDs ‚Üí mets-les dans l‚ÄôENV.
Webhook (mode test) :
Endpoint : /api/webhooks/stripe
Events : checkout.session.completed
Copie le STRIPE_WEBHOOK_SECRET.
Cartes tests :
CB : 4242 4242 4242 4242
SEPA : DE89370400440532013000 (ok imm√©diat en test). -->

### Adresses

<!-- http://localhost:3000/
https://preprod.au-paradis-ofer.fr
https://au-paradis-ofer.fr
https://github.com/Louis75011/Au-paradis-ofer/tree/preprod
https://dashboard.stripe.com/test/dashboard -->

### SUR LE VPS

<!-- Prod : au-paradis-ofer.fr ‚Üí Nginx ‚Üí 127.0.0.1:3000 ‚Üí PM2 app au-paradis-ofer
Pr√©prod : preprod.au-paradis-ofer.fr ‚Üí Nginx ‚Üí 127.0.0.1:3001 ‚Üí PM2 app au-paradis-ofer-preprod -->

<!-- /etc/nginx/sites-available/au-paradis-ofer.fr -->

<!-- /root/deploy.sh
/root/deploy.sh main
/root/deploy.sh preprod
pm2 startup
pm2 save -->

<!--  -->

<!-- wsl -d Debian12
ssh root@51.68.230.93
# ou
ssh root@vps-e4eb1efc.vps.ovh.net

pm2 ls
systemctl status nginx --no-pager -l
curl -I https://au-paradis-ofer.fr

# 0) aller au projet
cd /root/apps/Au-paradis-ofer

# 1) r√©cup√©rer les changements
git pull origin main

# 2) installer d√©pendances si besoin (monorepo)
cd apps/frontend
pnpm install

# 3) rebuild Next
pnpm build

...

D√©ployer au quotidien

cd /root/ && ls

Pr√©prod :
cd /root/apps/Au-paradis-ofer-preprod
bash /root/deploy-preprod.sh preprod
pm2 status
curl -I https://preprod.au-paradis-ofer.fr/

Prod :
cd /root/apps/Au-paradis-ofer
bash /root/deploy.sh main
pm2 status
curl -I https://au-paradis-ofer.fr/
-->

<!-- root@vps-e4eb1efc:~/apps/Au-paradis-ofer-preprod/apps/frontend# nano /etc/nginx/sites-available/preprod.au-paradis-ofer.fr
root@vps-e4eb1efc:~/apps/Au-paradis-ofer-preprod/apps/frontend# nano /etc/nginx/sites-available/au-paradis-ofer.fr -->

### VRAC paiement & calendrier

<!-- Stripe paiement carte et SEPA, FullCalendar : calendrier g√©r√© et r√©servations, Cloudflare test et deploiement avant h√©bergeur -->

<!-- Google Agenda (pour √©viter les doubles r√©servations) : Settings ‚Üí Calendars ‚Üí connectez votre compte au.paradis.o.fer@gmail.com. -->

<!-- R√©server selon horaires s√©ances et calendrier non par jour mais par heure -->

<!-- pnpm -C apps/frontend build; if ($LASTEXITCODE -eq 0) { pnpm -C apps/frontend start }
(TEST PROD LOCAL) -->

<!-- pnpm --filter frontend vercel build
pnpm -C apps/frontend build; if ($LASTEXITCODE -eq 0) { pnpm -C apps/frontend start } -->

<!-- Reservation autonome avec FullCalendar et un paiement Stripe.
SEPA est autoris√© uniquement si le cr√©neau ‚â• J+5.
Phase 1 marche sans base. Phase 2 (KV) verrouille les cr√©neaux proprement. -->

#### Frontend (Next.js)

```powershell
pnpm dev       # Next dev
pnpm build     # Next build
pnpm lint      # ESLint + Stylelint
pnpm test      # Vitest
pnpm storybook # Storybook
```

#### Backend (FastAPI)

```powershell
.\.venv\Scripts\Activate.ps1
uvicorn app.main:app --reload   # (structure √† venir)
pytest
ruff check .
black . --check
alembic upgrade head

```

#### Commandes Terminal

# GIT

git aa ; git c "NOM" ; git p

# M√ÄJ

git checkout main ; git pull origin main ; git merge dev ; git push origin main

# STORYBOOK

pnpm -C apps/frontend storybook

# LOCAL FRONT

pnpm -C apps/frontend dev

# LOCAL BACK

cd \apps\api
.venv\Scripts\Activate
uvicorn app.main:app --reload --port 8000

#### √Ä tester

Exemple de requ√™tes GraphQL (tests rapides)
R√©cup√©rer les s√©ances
query { sessions { id name duration_minutes price_eur } }

Demander une r√©servation (enverra un mail simul√© si SMTP non configur√©)
mutation {
requestBooking(input:{
fullName:"Jean Dupont", email:"jean@example.com", date:"2025-09-02", sessionId:1
}) { id status }
}

IMAGES : Cloudinary (!) ou Vercel Blob pour le stockage d‚Äôimages

#### Git utilisateur

[core]
editor = code --wait # VSCode comme √©diteur par d√©faut (facultatif)
autocrlf = input # gestion des fins de ligne (bon compromis sous Windows)
ignorecase = true

[alias]
st = status
co = checkout
b = branch
br = branch
g = grep
c = commit -m
aa = add .
ca = commit -a -m
df = diff
lg = log --oneline --graph --decorate --all
pl = pull --rebase
ps = push
p = push
undo = reset --soft HEAD~1
amend = commit --amend --no-edit
acp = "!f() { git add . && git commit -m \"$1\" && git push; }; f"
sw = switch
cob = checkout -b

üëâ Ces commandes sont vos raccourcis pratiques pour lancer le frontend, le backend, l'outil de versioning git, les tests et les outils de qualit√©.
